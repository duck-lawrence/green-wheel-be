version: "3.9"

services:
  greenwheel-backend:
    container_name: greenwheel-backend
    build:
      context: .
      dockerfile: dev.Dockerfile
    ports:
      - "5160:5160"
    env_file:
      - .env
    environment:
      # M√¥i tr∆∞·ªùng Development
      ASPNETCORE_ENVIRONMENT: Development

      # K·∫øt n·ªëi t·ªõi SQL Server container
      MSSQL_CONNECTION_STRING: >
        Server=mssql,1433;
        Database=${MSSQL_DB};
        User Id=${MSSQL_USER};
        Password=${MSSQL_PASSWORD};
        TrustServerCertificate=True;

      # K·∫øt n·ªëi t·ªõi Redis container
      REDIS_CONFIGURATION: redis:6379

    # depends_on:
    #   - redis
    #   - mssql

    # Volume mount ƒë·ªÉ hot reload code v√† l∆∞u log
    volumes:
      - .:/src
      - ./logs:/app/logs
      - ~/.nuget/packages:/root/.nuget/packages

    # Ki·ªÉm tra s·ª©c kh·ªèe backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5160/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (local)
  redis:
    container_name: greenwheel-redis
    image: redis:7.0
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - greenwheel_redis_data:/data
    restart: always

  # üóÑÔ∏è SQL Server (local)
  mssql:
    build:
      context: .
      dockerfile: mssql.Dockerfile
    container_name: greenwheel-mssql
    ports:
      - "${MSSQL_PORT}:1433"
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: ${MSSQL_PASSWORD}
    volumes:
      - greenwheel_mssql_data:/var/opt/mssql
      - ./init-db:/init-db
    restart: always

    # Healthcheck ƒë·∫£m b·∫£o SQL ƒë√£ s·∫µn s√†ng
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MSSQL_PASSWORD} -Q 'SELECT 1' || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  greenwheel_redis_data:
  greenwheel_mssql_data:
