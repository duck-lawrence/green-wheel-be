// <auto-generated />
using System;
using Infrastructure.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GreenWheelDbContext))]
    partial class GreenWheelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<int>("FoundedYear")
                        .HasColumnType("int")
                        .HasColumnName("founded_year");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__brands__3213E83F39FD01A6");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CitizenIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expires_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("ImagePublicId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_public_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nationality");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("number");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__citizen___3213E83F5AA98353");

                    b.HasIndex(new[] { "UserId" }, "UQ__citizen___B9BE370E6D3C6B98")
                        .IsUnique();

                    b.HasIndex(new[] { "Number" }, "UQ__citizen___FD291E41F15782F6")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "uq_citizen_identities_user_id")
                        .IsUnique();

                    b.ToTable("citizen_identities", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("invoice_id");

                    b.Property<DateTimeOffset?>("RefundedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("refunded_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__deposits__3213E83FA62669D9");

                    b.HasIndex(new[] { "InvoiceId" }, "UQ__deposits__F58DFD48A531CFB0")
                        .IsUnique();

                    b.HasIndex(new[] { "InvoiceId" }, "uq_deposits_invoice_id")
                        .IsUnique();

                    b.ToTable("deposits", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ApprovedAdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approved_admin_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<Guid>("FromStationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("from_station_id");

                    b.Property<Guid>("RequestAdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("request_admin_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("ToStationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("to_station_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__dispatch__3213E83F4F8E6A7E");

                    b.HasIndex(new[] { "ApprovedAdminId" }, "idx_dispatch_requests_approved_admin_id");

                    b.HasIndex(new[] { "FromStationId" }, "idx_dispatch_requests_from_station_id");

                    b.HasIndex(new[] { "RequestAdminId" }, "idx_dispatch_requests_request_admin_id");

                    b.HasIndex(new[] { "ToStationId" }, "idx_dispatch_requests_to_station_id");

                    b.ToTable("dispatch_requests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequestStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DispatchRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dispatch_request_id");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__dispatch__3213E83FF6079550");

                    b.HasIndex(new[] { "DispatchRequestId" }, "idx_dispatch_request_staffs_dispatch_request_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_dispatch_request_staffs_staff_id");

                    b.ToTable("dispatch_request_staffs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequestVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DispatchRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("dispatch_request_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("PK__dispatch__3213E83FF618BAA1");

                    b.HasIndex(new[] { "DispatchRequestId" }, "idx_dispatch_request_vehicles_dispatch_request_id");

                    b.HasIndex(new[] { "VehicleId" }, "idx_dispatch_request_vehicles_vehicle_id");

                    b.ToTable("dispatch_request_vehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DriverLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnName("class");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expires_at");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("ImagePublicId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_public_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nationality");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("number");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__driver_l__3213E83F0C52E57F");

                    b.HasIndex(new[] { "UserId" }, "UQ__driver_l__B9BE370EC7CF60FE")
                        .IsUnique();

                    b.HasIndex(new[] { "Number" }, "UQ__driver_l__FD291E41C4B31239")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "uq_driver_licenses_user_id")
                        .IsUnique();

                    b.ToTable("driver_licenses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ChecklistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("checklist_id");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("contract_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("paid_amount");

                    b.Property<DateTimeOffset?>("PaidAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("paid_at");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("subtotal");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("tax");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__invoices__3213E83FD78CB2FD");

                    b.HasIndex(new[] { "ContractId" }, "idx_invoices_contract_id");

                    b.HasIndex(new[] { "ChecklistId" }, "uq_invoices_checklist_id")
                        .IsUnique()
                        .HasFilter("([checklist_id] IS NOT NULL)");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ChecklistItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("checklist_item_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("invoice_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__invoice___3213E83FA6AF7666");

                    b.HasIndex(new[] { "ChecklistItemId" }, "idx_invoice_items_checklist_item_id")
                        .IsUnique()
                        .HasFilter("([checklist_item_id] IS NOT NULL)");

                    b.HasIndex(new[] { "InvoiceId" }, "idx_invoice_items_invoice_id");

                    b.ToTable("invoice_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ModelComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("component_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("model_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__model_co__3213E83F3C4DADC3");

                    b.HasIndex(new[] { "ComponentId" }, "idx_model_components_component_id");

                    b.HasIndex(new[] { "ModelId" }, "idx_model_components_model_id");

                    b.ToTable("model_components", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ModelImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("model_id");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("public_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("PK__model_im__3213E83FF3E97981");

                    b.HasIndex(new[] { "Url" }, "UQ__model_im__DD7784175340E62A")
                        .IsUnique();

                    b.HasIndex(new[] { "ModelId" }, "idx_model_images_model_id");

                    b.ToTable("model_images", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit")
                        .HasColumnName("is_revoked");

                    b.Property<DateTimeOffset>("IssuedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("issued_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("token");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__refresh___3213E83F8B43C8C7");

                    b.HasIndex(new[] { "UserId" }, "idx_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RentalContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset?>("ActualEndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("actual_end_date");

                    b.Property<DateTimeOffset?>("ActualStartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("actual_start_date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("HandoverStaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("handover_staff_id");

                    b.Property<bool>("IsSignedByCustomer")
                        .HasColumnType("bit")
                        .HasColumnName("is_signed_by_customer");

                    b.Property<bool>("IsSignedByStaff")
                        .HasColumnType("bit")
                        .HasColumnName("is_signed_by_staff");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<Guid?>("ReturnStaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("return_staff_id");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("start_date");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("station_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("PK__rental_c__3213E83F817349DC");

                    b.HasIndex("StationId");

                    b.HasIndex(new[] { "CustomerId" }, "idx_rental_contracts_customer_id");

                    b.HasIndex(new[] { "HandoverStaffId" }, "idx_rental_contracts_handover_staff_id");

                    b.HasIndex(new[] { "ReturnStaffId" }, "idx_rental_contracts_return_staff_id");

                    b.HasIndex(new[] { "VehicleId" }, "idx_rental_contracts_vehicle_id");

                    b.ToTable("rental_contracts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83F94B3D944");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("station_id");

                    b.HasKey("UserId")
                        .HasName("PK__staffs__B9BE370FBBD826E4");

                    b.HasIndex(new[] { "StationId" }, "idx_staffs_station_id");

                    b.ToTable("staffs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StaffReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("admin_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reply");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("SupportRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("support_request_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__staff_re__3213E83F5156E646");

                    b.HasIndex(new[] { "AdminId" }, "idx_staff_reports_admin_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_staff_reports_staff_id");

                    b.HasIndex(new[] { "SupportRequestId" }, "idx_staff_reports_support_id");

                    b.ToTable("staff_reports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__stations__3213E83FDE57DAC6");

                    b.ToTable("stations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StationFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("station_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__station___3213E83F2B055C9C");

                    b.HasIndex(new[] { "CustomerId" }, "idx_station_feedbacks_customer_id");

                    b.HasIndex(new[] { "StationId" }, "idx_station_feedbacks_station_id");

                    b.ToTable("station_feedbacks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SupportRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reply");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__support___3213E83F22E367C7");

                    b.HasIndex(new[] { "StaffId" }, "idx_support_requests_staff_id");

                    b.HasIndex(new[] { "CustomerId" }, "idx_support_requests_user_id");

                    b.ToTable("support_requests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AvatarPublicId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar_public_id");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsGoogleLinked")
                        .HasColumnType("bit")
                        .HasColumnName("is_google_linked");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<int?>("Sex")
                        .HasColumnType("int")
                        .HasColumnName("sex");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83F083E0E83");

                    b.HasIndex(new[] { "RoleId" }, "idx_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("license_plate");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("model_id");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("station_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__vehicles__3213E83F1CEAB601");

                    b.HasIndex(new[] { "LicensePlate" }, "UQ__vehicles__F72CD56E11B6394E")
                        .IsUnique();

                    b.HasIndex(new[] { "ModelId" }, "idx_vehicles_model_id");

                    b.HasIndex(new[] { "StationId" }, "idx_vehicles_vehicles");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleChecklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("contract_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSignedByCustomer")
                        .HasColumnType("bit")
                        .HasColumnName("is_signed_by_customer");

                    b.Property<bool>("IsSignedByStaff")
                        .HasColumnType("bit")
                        .HasColumnName("is_signed_by_staff");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("PK__vehicle___3213E83F5B95E7CD");

                    b.HasIndex(new[] { "ContractId" }, "idx_vehicle_checklists_contract_id");

                    b.HasIndex(new[] { "CustomerId" }, "idx_vehicle_checklists_customer_id");

                    b.HasIndex(new[] { "StaffId" }, "idx_vehicle_checklists_staff_id");

                    b.HasIndex(new[] { "VehicleId" }, "idx_vehicle_checklists_vehicle_id");

                    b.ToTable("vehicle_checklists", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleChecklistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("checklist_id");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("component_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ImagePublicId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_public_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__vehicle___3213E83F906FB6F6");

                    b.HasIndex(new[] { "ChecklistId" }, "idx_vehicle_checklist_items_checklist_id");

                    b.HasIndex(new[] { "ComponentId" }, "idx_vehicle_checklist_items_component_id");

                    b.HasIndex(new[] { "ImageUrl" }, "idx_vehicle_checklist_items_image_url")
                        .IsUnique()
                        .HasFilter("([image_url] IS NOT NULL)");

                    b.ToTable("vehicle_checklist_items", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__vehicle___3213E83F39DCC37F");

                    b.ToTable("vehicle_components", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("BatteryCapacity")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("battery_capacity");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("brand_id");

                    b.Property<decimal>("CostPerDay")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("cost_per_day");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("DepositFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("deposit_fee");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("EcoRangeKm")
                        .HasColumnType("decimal(6, 1)")
                        .HasColumnName("eco_range_km");

                    b.Property<string>("ImagePublicId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_public_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<decimal>("MotorPower")
                        .HasColumnType("decimal(5, 1)")
                        .HasColumnName("motor_power");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfAirbags")
                        .HasColumnType("int")
                        .HasColumnName("number_of_airbags");

                    b.Property<int>("SeatingCapacity")
                        .HasColumnType("int")
                        .HasColumnName("seating_capacity");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("segment_id");

                    b.Property<decimal>("SportRangeKm")
                        .HasColumnType("decimal(6, 1)")
                        .HasColumnName("sport_range_km");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__vehicle___3213E83F7DCE480B");

                    b.HasIndex(new[] { "SegmentId" }, "idx_vehicle_models__segment_id");

                    b.HasIndex(new[] { "BrandId" }, "idx_vehicle_models_brand_id");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VehicleSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.HasKey("Id")
                        .HasName("PK__vehicle___3213E83FB644C5D3");

                    b.ToTable("vehicle_segments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CitizenIdentity", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("CitizenIdentity")
                        .HasForeignKey("Domain.Entities.CitizenIdentity", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_citizen_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Deposit", b =>
                {
                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithOne("Deposit")
                        .HasForeignKey("Domain.Entities.Deposit", "InvoiceId")
                        .IsRequired()
                        .HasConstraintName("fk_deposits_invoices");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequest", b =>
                {
                    b.HasOne("Domain.Entities.Staff", "ApprovedAdmin")
                        .WithMany("DispatchRequestApprovedAdmins")
                        .HasForeignKey("ApprovedAdminId")
                        .HasConstraintName("fk_dispatch_requests_approved_admins");

                    b.HasOne("Domain.Entities.Station", "FromStation")
                        .WithMany("DispatchRequestFromStations")
                        .HasForeignKey("FromStationId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_requests_from_stations");

                    b.HasOne("Domain.Entities.Staff", "RequestAdmin")
                        .WithMany("DispatchRequestRequestAdmins")
                        .HasForeignKey("RequestAdminId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_requests_request_admins");

                    b.HasOne("Domain.Entities.Station", "ToStation")
                        .WithMany("DispatchRequestToStations")
                        .HasForeignKey("ToStationId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_requests_to_stations");

                    b.Navigation("ApprovedAdmin");

                    b.Navigation("FromStation");

                    b.Navigation("RequestAdmin");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequestStaff", b =>
                {
                    b.HasOne("Domain.Entities.DispatchRequest", "DispatchRequest")
                        .WithMany("DispatchRequestStaffs")
                        .HasForeignKey("DispatchRequestId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_request_staffs_dispatch_requests");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("DispatchRequestStaffs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_request_staffs_staffs");

                    b.Navigation("DispatchRequest");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequestVehicle", b =>
                {
                    b.HasOne("Domain.Entities.DispatchRequest", "DispatchRequest")
                        .WithMany("DispatchRequestVehicles")
                        .HasForeignKey("DispatchRequestId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_request_vehicles_dispatch_requests");

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("DispatchRequestVehicles")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_request_vehicles_vehicles");

                    b.Navigation("DispatchRequest");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.DriverLicense", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("DriverLicense")
                        .HasForeignKey("Domain.Entities.DriverLicense", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_driver_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.HasOne("Domain.Entities.VehicleChecklist", "Checklist")
                        .WithOne("Invoice")
                        .HasForeignKey("Domain.Entities.Invoice", "ChecklistId")
                        .HasConstraintName("fk_invoices_checklists");

                    b.HasOne("Domain.Entities.RentalContract", "Contract")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractId")
                        .IsRequired()
                        .HasConstraintName("fk_invoices_contracts");

                    b.Navigation("Checklist");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Domain.Entities.VehicleChecklistItem", "ChecklistItem")
                        .WithOne("InvoiceItem")
                        .HasForeignKey("Domain.Entities.InvoiceItem", "ChecklistItemId")
                        .HasConstraintName("fk_invoice_items_checklist_items");

                    b.HasOne("Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("fk_invoice_items_invoices");

                    b.Navigation("ChecklistItem");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entities.ModelComponent", b =>
                {
                    b.HasOne("Domain.Entities.VehicleComponent", "Component")
                        .WithMany("ModelComponents")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("fk_model_components_vehicle_components");

                    b.HasOne("Domain.Entities.VehicleModel", "Model")
                        .WithMany("ModelComponents")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("fk_model_components_vehicle_models");

                    b.Navigation("Component");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Domain.Entities.ModelImage", b =>
                {
                    b.HasOne("Domain.Entities.VehicleModel", "Model")
                        .WithMany("ModelImages")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("fk_model_images_vehicle_models");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("fk_refresh_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RentalContract", b =>
                {
                    b.HasOne("Domain.Entities.User", "Customer")
                        .WithMany("RentalContracts")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_rental_contracts_customers");

                    b.HasOne("Domain.Entities.Staff", "HandoverStaff")
                        .WithMany("RentalContractHandoverStaffs")
                        .HasForeignKey("HandoverStaffId")
                        .HasConstraintName("fk_rental_contracts_handover_staffs");

                    b.HasOne("Domain.Entities.Staff", "ReturnStaff")
                        .WithMany("RentalContractReturnStaffs")
                        .HasForeignKey("ReturnStaffId")
                        .HasConstraintName("fk_rental_contracts_return_staffs");

                    b.HasOne("Domain.Entities.Station", "Station")
                        .WithMany("RentalContracts")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("RentalContracts")
                        .HasForeignKey("VehicleId")
                        .HasConstraintName("fk_rental_contracts_vehicles");

                    b.Navigation("Customer");

                    b.Navigation("HandoverStaff");

                    b.Navigation("ReturnStaff");

                    b.Navigation("Station");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.HasOne("Domain.Entities.Station", "Station")
                        .WithMany("Staff")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_stations");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entities.Staff", "UserId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_users");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.StaffReport", b =>
                {
                    b.HasOne("Domain.Entities.Staff", "Admin")
                        .WithMany("StaffReportAdmins")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("fk_staff_reports_admin");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("StaffReportStaffs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_staff_reports_staffs");

                    b.HasOne("Domain.Entities.SupportRequest", "SupportRequest")
                        .WithMany("StaffReports")
                        .HasForeignKey("SupportRequestId")
                        .HasConstraintName("fk_staff_reports_support");

                    b.Navigation("Admin");

                    b.Navigation("Staff");

                    b.Navigation("SupportRequest");
                });

            modelBuilder.Entity("Domain.Entities.StationFeedback", b =>
                {
                    b.HasOne("Domain.Entities.User", "Customer")
                        .WithMany("StationFeedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_feedback_users");

                    b.HasOne("Domain.Entities.Station", "Station")
                        .WithMany("StationFeedbacks")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("fk_feedback_stations");

                    b.Navigation("Customer");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Entities.SupportRequest", b =>
                {
                    b.HasOne("Domain.Entities.User", "Customer")
                        .WithMany("SupportRequests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("fk_support_requests_user");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("SupportRequests")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("fk_support_requests_staff");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_users_roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Domain.Entities.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_models");

                    b.HasOne("Domain.Entities.Station", "Station")
                        .WithMany("Vehicles")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_stations");

                    b.Navigation("Model");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Domain.Entities.VehicleChecklist", b =>
                {
                    b.HasOne("Domain.Entities.RentalContract", "Contract")
                        .WithMany("VehicleChecklists")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("fk_vehicle_checklists_contracts");

                    b.HasOne("Domain.Entities.User", "Customer")
                        .WithMany("VehicleChecklists")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_vehicle_checklists_users");

                    b.HasOne("Domain.Entities.Staff", "Staff")
                        .WithMany("VehicleChecklists")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_checklists_staffs");

                    b.HasOne("Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleChecklists")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_checklists_vehicles");

                    b.Navigation("Contract");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Entities.VehicleChecklistItem", b =>
                {
                    b.HasOne("Domain.Entities.VehicleChecklist", "Checklist")
                        .WithMany("VehicleChecklistItems")
                        .HasForeignKey("ChecklistId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_checklist_items_checklists");

                    b.HasOne("Domain.Entities.VehicleComponent", "Component")
                        .WithMany("VehicleChecklistItems")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("fk_vehicle_checklist_items_components");

                    b.Navigation("Checklist");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("VehicleModels")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("fk_model_brands");

                    b.HasOne("Domain.Entities.VehicleSegment", "Segment")
                        .WithMany("VehicleModels")
                        .HasForeignKey("SegmentId")
                        .IsRequired()
                        .HasConstraintName("fk_model_segments");

                    b.Navigation("Brand");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("Domain.Entities.DispatchRequest", b =>
                {
                    b.Navigation("DispatchRequestStaffs");

                    b.Navigation("DispatchRequestVehicles");
                });

            modelBuilder.Entity("Domain.Entities.Invoice", b =>
                {
                    b.Navigation("Deposit");

                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Domain.Entities.RentalContract", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("VehicleChecklists");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Navigation("DispatchRequestApprovedAdmins");

                    b.Navigation("DispatchRequestRequestAdmins");

                    b.Navigation("DispatchRequestStaffs");

                    b.Navigation("RentalContractHandoverStaffs");

                    b.Navigation("RentalContractReturnStaffs");

                    b.Navigation("StaffReportAdmins");

                    b.Navigation("StaffReportStaffs");

                    b.Navigation("SupportRequests");

                    b.Navigation("VehicleChecklists");
                });

            modelBuilder.Entity("Domain.Entities.Station", b =>
                {
                    b.Navigation("DispatchRequestFromStations");

                    b.Navigation("DispatchRequestToStations");

                    b.Navigation("RentalContracts");

                    b.Navigation("Staff");

                    b.Navigation("StationFeedbacks");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.SupportRequest", b =>
                {
                    b.Navigation("StaffReports");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CitizenIdentity");

                    b.Navigation("DriverLicense");

                    b.Navigation("RefreshTokens");

                    b.Navigation("RentalContracts");

                    b.Navigation("Staff");

                    b.Navigation("StationFeedbacks");

                    b.Navigation("SupportRequests");

                    b.Navigation("VehicleChecklists");
                });

            modelBuilder.Entity("Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("DispatchRequestVehicles");

                    b.Navigation("RentalContracts");

                    b.Navigation("VehicleChecklists");
                });

            modelBuilder.Entity("Domain.Entities.VehicleChecklist", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("VehicleChecklistItems");
                });

            modelBuilder.Entity("Domain.Entities.VehicleChecklistItem", b =>
                {
                    b.Navigation("InvoiceItem");
                });

            modelBuilder.Entity("Domain.Entities.VehicleComponent", b =>
                {
                    b.Navigation("ModelComponents");

                    b.Navigation("VehicleChecklistItems");
                });

            modelBuilder.Entity("Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("ModelComponents");

                    b.Navigation("ModelImages");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Domain.Entities.VehicleSegment", b =>
                {
                    b.Navigation("VehicleModels");
                });
#pragma warning restore 612, 618
        }
    }
}
